import {
    Handshake,
    NumberToUnsignedShort,
    NumberToVarNumber,
    Packet,
    StringToVarString,
    Unpack,
    UnsignedShortToNumber,
    VarNumberToNumber,
    VarStringToString,
} from '../../lib/minecraft';

test('lib/minecraft/NumberToUnsignedShort', () => {
    const res = Buffer.from([0x63, 0xDD]);
    expect(NumberToUnsignedShort(25565)).toEqual(res);
});

test('lib/minecraft/UnsignedShortToNumber', () => {
    const res = [25565, Buffer.alloc(0)];
    expect(UnsignedShortToNumber(Buffer.from([0x63, 0xDD]))).toEqual(res);
});

test('lib/minecraft/NumberToVarNumber', () => {
    const res1 = Buffer.from([0xE0, 0x05]);
    const res2 = Buffer.from([0xFF, 0xFF, 0xFF, 0xFF, 0x0F]);
    expect(NumberToVarNumber(736)).toEqual(res1);
    expect(NumberToVarNumber(-1)).toEqual(res2);
});

test('lib/minecraft/VarNumberToNumber', () => {
    const res = [736, Buffer.alloc(0)];
    expect(VarNumberToNumber(Buffer.from([0xE0, 0x05]))).toEqual(res);
});

test('lib/minecraft/StringToVarString', () => {
    const res = Buffer.from([0x18, 0x6D, 0x69, 0x6E, 0x65, 0x63, 0x72, 0x61, 0x66, 0x74, 0x2E, 0x6D, 0x61, 0x6B, 0x75, 0x74, 0x61, 0x6D, 0x6F, 0x74, 0x6F, 0x2E, 0x63, 0x6F, 0x6D]);
    expect(StringToVarString('minecraft.makutamoto.com')).toEqual(res);
});

test('lib/minecraft/VarStringToString', () => {
    const arg = Buffer.from([0x18, 0x6D, 0x69, 0x6E, 0x65, 0x63, 0x72, 0x61, 0x66, 0x74, 0x2E, 0x6D, 0x61, 0x6B, 0x75, 0x74, 0x61, 0x6D, 0x6F, 0x74, 0x6F, 0x2E, 0x63, 0x6F, 0x6D]);
    const res = ['minecraft.makutamoto.com', Buffer.alloc(0)];
    expect(VarStringToString(arg)).toEqual(res);
});

test('lib/minecraft/Handshake', () => {
    const res = Buffer.from([0xE0, 0x05, 0x18, 0x6D, 0x69, 0x6E, 0x65, 0x63, 0x72, 0x61, 0x66, 0x74, 0x2E, 0x6D, 0x61, 0x6B, 0x75, 0x74, 0x61, 0x6D, 0x6F, 0x74, 0x6F, 0x2E, 0x63, 0x6F, 0x6D, 0x63, 0xDD, 0x01]);
    expect(Handshake(736, 'minecraft.makutamoto.com', 25565, 1)).toEqual(res);
});

test('lib/minecraft/Packet', () => {
    const res = Buffer.from([0x1F, 0x00, 0xE0, 0x05, 0x18, 0x6D, 0x69, 0x6E, 0x65, 0x63, 0x72, 0x61, 0x66, 0x74, 0x2E, 0x6D, 0x61, 0x6B, 0x75, 0x74, 0x61, 0x6D, 0x6F, 0x74, 0x6F, 0x2E, 0x63, 0x6F, 0x6D, 0x63, 0xDD, 0x01]);
    expect(Packet(0x00, Handshake(736, 'minecraft.makutamoto.com', 25565, 1))).toEqual(res);
});

test('lib/minecraft/Unpack', () => {
    const res: [Packet, Buffer] = [{ length: 30, id: 0x00 }, Buffer.from([0xE0, 0x05, 0x18, 0x6D, 0x69, 0x6E, 0x65, 0x63, 0x72, 0x61, 0x66, 0x74, 0x2E, 0x6D, 0x61, 0x6B, 0x75, 0x74, 0x61, 0x6D, 0x6F, 0x74, 0x6F, 0x2E, 0x63, 0x6F, 0x6D, 0x63, 0xDD, 0x01])];
    expect(Unpack(Buffer.from([0x1F, 0x00, 0xE0, 0x05, 0x18, 0x6D, 0x69, 0x6E, 0x65, 0x63, 0x72, 0x61, 0x66, 0x74, 0x2E, 0x6D, 0x61, 0x6B, 0x75, 0x74, 0x61, 0x6D, 0x6F, 0x74, 0x6F, 0x2E, 0x63, 0x6F, 0x6D, 0x63, 0xDD, 0x01]))).toEqual(res);
});
